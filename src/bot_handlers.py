from aiogram import Bot, Router, F
from aiogram.enums import ParseMode
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import psutil
from datetime import datetime
import re

from .utils import log_command, is_user_allowed, execute_command
from .hardware_monitor import (get_system_info, get_cpu_temp, get_gpu_info,
                            plot_cpu_graph)
from .config import FORBIDDEN_COMMANDS

class ConsoleStates(StatesGroup):
    waiting_for_command = State()

def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
            [KeyboardButton(text="üñ•Ô∏è CPU"), KeyboardButton(text="üß† RAM")],
            [KeyboardButton(text="üéÆ GPU"), KeyboardButton(text="üî• –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")],
            [KeyboardButton(text="üíæ –î–∏—Å–∫"), KeyboardButton(text="üåê –°–µ—Ç—å")],
            [KeyboardButton(text="üìã –ü—Ä–æ—Ü–µ—Å—Å—ã"), KeyboardButton(text="‚è±Ô∏è –ê–ø—Ç–∞–π–º")],
            [KeyboardButton(text="‚å®Ô∏è –ö–æ–Ω—Å–æ–ª—å")],
        ],
        resize_keyboard=True
    )
    return keyboard

async def cmd_start(message: Message):
    log_command(message.from_user.id, "/start")
    
    if not is_user_allowed(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
        return
    
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        f"–Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Linux-—Å–µ—Ä–≤–µ—Ä–∞.\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=get_main_keyboard()
    )

async def cmd_help(message: Message):
    log_command(message.from_user.id, "/help")
    
    help_text = """
*–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:*
/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/status - –ü–æ–∫–∞–∑–∞—Ç—å –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ

*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏:*
üìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è - –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
üñ•Ô∏è CPU - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
üß† RAM - –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏
üéÆ GPU - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–≥–æ —É—Å–∫–æ—Ä–∏—Ç–µ–ª—è
üî• –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ —Å–∏—Å—Ç–µ–º—ã
üíæ –î–∏—Å–∫ - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–æ–≤–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ
üåê –°–µ—Ç—å - –°–µ—Ç–µ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
üìã –ü—Ä–æ—Ü–µ—Å—Å—ã - –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
‚è±Ô∏è –ê–ø—Ç–∞–π–º - –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞
‚å®Ô∏è –ö–æ–Ω—Å–æ–ª—å - –ö–æ–Ω—Å–æ–ª—å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–æ–º
"""
    await message.answer(help_text, parse_mode=ParseMode.MARKDOWN)

async def cmd_status(message: Message):
    if message.text == "/status":
        log_command(message.from_user.id, "/status")
    else:
        log_command(message.from_user.id, "üìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    
    status_message = await message.answer("‚è≥ –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ...")
    system_info = await get_system_info()
    await message.bot.delete_message(chat_id=message.chat.id, message_id=status_message.message_id)
    await message.answer(system_info, parse_mode=ParseMode.MARKDOWN)

async def cpu_info(message: Message):
    log_command(message.from_user.id, "üñ•Ô∏è CPU")
    
    cpu_message = await message.answer("‚è≥ –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ CPU...")
    
    physical_cores = psutil.cpu_count(logical=False)
    total_cores = psutil.cpu_count(logical=True)
    
    avg_temp, core_temps = await get_cpu_temp()
    
    cpu_freq = psutil.cpu_freq()
    
    cpu_usage_per_core = psutil.cpu_percent(percpu=True, interval=1)
    
    cpu_info = f"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CPU:*\n"
    cpu_info += f"*–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU:* {avg_temp:.1f}¬∞C\n"
    cpu_info += f"*–§–∏–∑–∏—á–µ—Å–∫–∏–µ —è–¥—Ä–∞:* {physical_cores}\n"
    cpu_info += f"*–í—Å–µ–≥–æ —è–¥–µ—Ä:* {total_cores}\n"
    
    if cpu_freq:
        cpu_info += f"*–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞:* {cpu_freq.max:.2f}MHz\n"
        cpu_info += f"*–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —á–∞—Å—Ç–æ—Ç–∞:* {cpu_freq.min:.2f}MHz\n"
        cpu_info += f"*–¢–µ–∫—É—â–∞—è —á–∞—Å—Ç–æ—Ç–∞:* {cpu_freq.current:.2f}MHz\n"
    
    cpu_info += f"*–û–±—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU:* {psutil.cpu_percent()}%\n\n"
    
    cpu_info += "*–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ —è–¥—Ä–∞–º:*\n"
    for i, percentage in enumerate(cpu_usage_per_core):
        cpu_info += f"*–Ø–¥—Ä–æ {i+1}:* {percentage}%\n"
    
    plot_cpu_graph()
    photo = FSInputFile("logs/cpu_graph.png")
    await message.answer_photo(photo)
    
    await message.bot.delete_message(chat_id=message.chat.id, message_id=cpu_message.message_id)
    await message.answer(cpu_info, parse_mode=ParseMode.MARKDOWN)

async def ram_info(message: Message):
    log_command(message.from_user.id, "üß† RAM")
    
    ram_message = await message.answer("‚è≥ –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ RAM...")
    
    memory = psutil.virtual_memory()
    swap = psutil.swap_memory()
    
    ram_info = f"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ RAM:*\n"
    ram_info += f"*–í—Å–µ–≥–æ:* {memory.total / (1024**3):.2f} GB\n"
    ram_info += f"*–î–æ—Å—Ç—É–ø–Ω–æ:* {memory.available / (1024**3):.2f} GB\n"
    ram_info += f"*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:* {memory.used / (1024**3):.2f} GB\n"
    ram_info += f"*–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* {memory.percent}%\n\n"
    
    ram_info += f"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ SWAP:*\n"
    ram_info += f"*–í—Å–µ–≥–æ:* {swap.total / (1024**3):.2f} GB\n"
    ram_info += f"*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:* {swap.used / (1024**3):.2f} GB\n"
    ram_info += f"*–°–≤–æ–±–æ–¥–Ω–æ:* {swap.free / (1024**3):.2f} GB\n"
    ram_info += f"*–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* {swap.percent}%\n"
    
    await message.bot.delete_message(chat_id=message.chat.id, message_id=ram_message.message_id)
    await message.answer(ram_info, parse_mode=ParseMode.MARKDOWN)

async def gpu_info(message: Message):
    log_command(message.from_user.id, "üéÆ GPU")
    
    temp_message = await message.answer("‚è≥ –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ GPU...")
    gpu_utilization, gpu_temp = get_gpu_info()
    await message.bot.delete_message(chat_id=message.chat.id, message_id=temp_message.message_id)
    if gpu_utilization is not None:
        info = (
            f"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GPU:*\n"
            f"–ó–∞–≥—Ä—É–∑–∫–∞ GPU: {gpu_utilization}\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ GPU: {gpu_temp}"
        )
    else:
        info = "‚ùå –î–∞–Ω–Ω—ã–µ –æ GPU –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã."
    await message.answer(info, parse_mode=ParseMode.MARKDOWN)

async def temp_info(message: Message):
    log_command(message.from_user.id, "üî• –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")
    
    temp_message = await message.answer("‚è≥ –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ...")
    avg_temp, core_temps = await get_cpu_temp()
    gpu_utilization, gpu_temp = get_gpu_info()
    
    if avg_temp is None and gpu_temp is None:
        await message.bot.delete_message(chat_id=message.chat.id, message_id=temp_message.message_id)
        await message.answer("‚ùå –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", parse_mode=ParseMode.MARKDOWN)
        return
        
    temp_info = "*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ:*\n"
    if avg_temp is not None:
        temp_info += f"*–û–±—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞:* {avg_temp:.1f}¬∞C\n\n"
        temp_info += "*–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ —è–¥—Ä–∞–º:*\n"
        for i, temp in core_temps.items():
            temp_info += f"*–Ø–¥—Ä–æ {i+1}:* {temp:.1f}¬∞C\n"
        temp_info += "\n"
    if gpu_temp is not None:
        temp_info += f"*–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ GPU:* {gpu_temp}\n"
        
    await message.bot.delete_message(chat_id=message.chat.id, message_id=temp_message.message_id)
    await message.answer(temp_info, parse_mode=ParseMode.MARKDOWN)

async def disk_info(message: Message):
    log_command(message.from_user.id, "üíæ –î–∏—Å–∫")
    
    disk_message = await message.answer("‚è≥ –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö...")
    
    disk_info = "*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö:*\n\n"
    
    partitions = psutil.disk_partitions()
    for partition in partitions:
        try:
            partition_usage = psutil.disk_usage(partition.mountpoint)
            disk_info += f"*–†–∞–∑–¥–µ–ª:* {partition.mountpoint}\n"
            disk_info += f"*–§–∞–π–ª–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞:* {partition.fstype}\n"
            disk_info += f"*–í—Å–µ–≥–æ:* {partition_usage.total / (1024**3):.2f} GB\n"
            disk_info += f"*–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ:* {partition_usage.used / (1024**3):.2f} GB\n"
            disk_info += f"*–°–≤–æ–±–æ–¥–Ω–æ:* {partition_usage.free / (1024**3):.2f} GB\n"
            disk_info += f"*–ü—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:* {partition_usage.percent}%\n\n"
        except:
            continue
    
    disk_io = psutil.disk_io_counters()
    if disk_io:
        disk_info += "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–∏—Å–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π:*\n"
        disk_info += f"*–í—Å–µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ:* {disk_io.read_bytes / (1024**3):.2f} GB\n"
        disk_info += f"*–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–∞–Ω–æ:* {disk_io.write_bytes / (1024**3):.2f} GB\n"
    
    await message.bot.delete_message(chat_id=message.chat.id, message_id=disk_message.message_id)
    await message.answer(disk_info, parse_mode=ParseMode.MARKDOWN)

async def network_info(message: Message):
    log_command(message.from_user.id, "üåê –°–µ—Ç—å")
    
    network_message = await message.answer("‚è≥ –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∏...")
    
    network_info = "*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ç–∏:*\n\n"
    
    net_if_addrs = psutil.net_if_addrs()
    for interface_name, interface_addresses in net_if_addrs.items():
        network_info += f"*–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å:* {interface_name}\n"
        for address in interface_addresses:
            if address.family == psutil.AF_LINK:
                network_info += f"*MAC-–∞–¥—Ä–µ—Å:* {address.address}\n"
            elif address.family == 2:  # IPv4
                network_info += f"*IPv4-–∞–¥—Ä–µ—Å:* {address.address}\n"
            elif address.family == 30:  # IPv6
                network_info += f"*IPv6-–∞–¥—Ä–µ—Å:* {address.address}\n"
        network_info += "\n"
    
    net_io = psutil.net_io_counters()
    if net_io:
        network_info += "*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –≤–≤–æ–¥–∞-–≤—ã–≤–æ–¥–∞:*\n"
        network_info += f"*–í—Å–µ–≥–æ –±–∞–π—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:* {net_io.bytes_sent / (1024**2):.2f} MB\n"
        network_info += f"*–í—Å–µ–≥–æ –±–∞–π—Ç –ø–æ–ª—É—á–µ–Ω–æ:* {net_io.bytes_recv / (1024**2):.2f} MB\n"
        network_info += f"*–ü–∞–∫–µ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:* {net_io.packets_sent}\n"
        network_info += f"*–ü–∞–∫–µ—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ:* {net_io.packets_recv}\n"
    
    await message.bot.delete_message(chat_id=message.chat.id, message_id=network_message.message_id)
    await message.answer(network_info, parse_mode=ParseMode.MARKDOWN)

def escape_markdown_v2(text: str) -> str:
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –¥–ª—è Markdown V2"""
    special_chars = ['_', '*', '[', ']', '(', ')', '~', '`', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    for char in special_chars:
        text = text.replace(char, f'\\{char}')
    return text

async def process_info(message: Message):
    log_command(message.from_user.id, "üìã –ü—Ä–æ—Ü–µ—Å—Å—ã")
    
    process_message = await message.answer("‚è≥ –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö...")
    
    processes_info = "<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–∞—Ö:</b>\n\n"
    processes_info += "<b>–¢–æ–ø-10 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é CPU:</b>\n"
    
    processes = []
    for proc in psutil.process_iter(['pid', 'name', 'username', 'cpu_percent', 'memory_percent']):
        try:
            proc_info = proc.info
            proc_info['cpu_percent'] = proc.cpu_percent(interval=0.1)
            processes.append(proc_info)
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            pass
    
    processes = sorted(processes, key=lambda x: x['cpu_percent'], reverse=True)
    
    for i, proc in enumerate(processes[:10], 1):
        processes_info += f"{i}. <b>PID:</b> {proc['pid']}, <b>–ò–º—è:</b> {proc['name']}, <b>CPU:</b> {proc['cpu_percent']:.1f}%, <b>RAM:</b> {proc['memory_percent']:.1f}%\n"
    
    processes_info += f"\n<b>–í—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤:</b> {len(processes)}"
    
    await message.bot.delete_message(chat_id=message.chat.id, message_id=process_message.message_id)
    await message.answer(processes_info, parse_mode=ParseMode.HTML)

async def uptime_info(message: Message):
    log_command(message.from_user.id, "‚è±Ô∏è –ê–ø—Ç–∞–π–º")
    
    uptime_message = await message.answer("‚è≥ –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–ø—Ç–∞–π–º–µ...")
    
    boot_time = datetime.fromtimestamp(psutil.boot_time())
    uptime = datetime.now() - boot_time
    
    days = uptime.days
    hours, remainder = divmod(uptime.seconds, 3600)
    minutes, seconds = divmod(remainder, 60)
    
    uptime_info = "*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–ø—Ç–∞–π–º–µ:*\n\n"
    uptime_info += f"*–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:* {boot_time.strftime('%Y-%m-%d %H:%M:%S')}\n"
    uptime_info += f"*–ê–ø—Ç–∞–π–º:* {days} –¥–Ω. {hours} —á. {minutes} –º–∏–Ω. {seconds} —Å–µ–∫."
    
    await message.bot.delete_message(chat_id=message.chat.id, message_id=uptime_message.message_id)
    await message.answer(uptime_info, parse_mode=ParseMode.MARKDOWN)

async def console_command(message: Message, state: FSMContext):
    log_command(message.from_user.id, "‚å®Ô∏è –ö–æ–Ω—Å–æ–ª—å")
    
    if not is_user_allowed(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω—Å–æ–ª–∏.")
        return
    
    await state.set_state(ConsoleStates.waiting_for_command)
    await message.answer(
        "üñ•Ô∏è –†–µ–∂–∏–º –∫–æ–Ω—Å–æ–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.\n"
        "–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'exit' –∏–ª–∏ 'quit'.\n\n"
        "‚ö†Ô∏è –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."
    )

async def handle_console_command(message: Message, state: FSMContext):
    command = message.text.strip()
    
    if command.lower() in ['exit', 'quit']:
        await state.clear()
        await message.answer(
            "–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –∫–æ–Ω—Å–æ–ª–∏.",
            reply_markup=get_main_keyboard()
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    base_cmd = command.split()[0].lower()
    if base_cmd in FORBIDDEN_COMMANDS:
        await message.answer(f"‚õî –ö–æ–º–∞–Ω–¥–∞ '{base_cmd}' –∑–∞–ø—Ä–µ—â–µ–Ω–∞ –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é.")
        return

    log_command(message.from_user.id, f"Console: {command}")
    
    result = await execute_command(command)
    
    if len(result) > 4000:
        result = result[:4000] + "\n... (–≤—ã–≤–æ–¥ –æ–±—Ä–µ–∑–∞–Ω)"
    
    await message.answer(f"üìù –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:\n\n```\n{result}\n```", parse_mode=ParseMode.MARKDOWN)

async def unknown_message(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        return
        
    log_command(message.from_user.id, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {message.text}")
    
    await message.answer(
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.",
        reply_markup=get_main_keyboard()
    )

def register_handlers(router: Router):
    router.message.register(cmd_start, CommandStart())
    router.message.register(cmd_help, Command("help"))
    router.message.register(cmd_status, Command("status"))
    router.message.register(cmd_status, F.text == "üìä –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    router.message.register(cpu_info, F.text == "üñ•Ô∏è CPU")
    router.message.register(ram_info, F.text == "üß† RAM")
    router.message.register(gpu_info, F.text == "üéÆ GPU")
    router.message.register(temp_info, F.text == "üî• –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞")
    router.message.register(disk_info, F.text == "üíæ –î–∏—Å–∫")
    router.message.register(network_info, F.text == "üåê –°–µ—Ç—å")
    router.message.register(process_info, F.text == "üìã –ü—Ä–æ—Ü–µ—Å—Å—ã")
    router.message.register(uptime_info, F.text == "‚è±Ô∏è –ê–ø—Ç–∞–π–º")
    router.message.register(console_command, F.text == "‚å®Ô∏è –ö–æ–Ω—Å–æ–ª—å")
    router.message.register(handle_console_command, ConsoleStates.waiting_for_command)
    router.message.register(unknown_message) 