import psutil
import platform
from datetime import datetime
import matplotlib.pyplot as plt
import time
import asyncio
from aiogram.enums import ParseMode
from .utils import logger

try:
    import pynvml
    pynvml.nvmlInit()
    GPU_AVAILABLE = True
except (ImportError, pynvml.NVMLError, pynvml.NVMLError_LibraryNotFound):
    GPU_AVAILABLE = False

async def get_cpu_temp():
    if hasattr(psutil, "sensors_temperatures"):
        temperatures = psutil.sensors_temperatures()
        if not temperatures:
            return 0, {}
        temp_values = []
        core_temps = {}
        for sensor, entries in temperatures.items():
            for i, entry in enumerate(entries):
                    temp_values.append(entry.current)
                    core_temps[i] = entry.current
        if temp_values:
            avg_temp = sum(temp_values) / len(temp_values)  # –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
            return avg_temp, core_temps
    return 0, {}

def get_gpu_info():
    if not GPU_AVAILABLE:
        return "N/A", "N/A"

    try:
        gpu_count = pynvml.nvmlDeviceGetCount()
        if gpu_count == 0:
            return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–µ–æ–∫–∞—Ä—Ç", "N/A"
        total_utilization = 0
        total_temperature = 0
        for i in range(gpu_count):
            handle = pynvml.nvmlDeviceGetHandleByIndex(i)
            utilization = pynvml.nvmlDeviceGetUtilizationRates(handle).gpu
            temperature = pynvml.nvmlDeviceGetTemperature(handle, pynvml.NVML_TEMPERATURE_GPU)

            total_utilization += utilization
            total_temperature += temperature
        avg_utilization = total_utilization / gpu_count
        avg_temperature = total_temperature / gpu_count
        return f"{avg_utilization:.1f}%", f"{avg_temperature:.1f}¬∞C"
    except pynvml.NVMLError:
        return "–û—à–∏–±–∫–∞ GPU", "–û—à–∏–±–∫–∞"

def collect_cpu_data(duration=10, interval=1):
    timestamps = []
    cpu_usage = []
    for i in range(duration):
        timestamps.append(i * interval)
        cpu_usage.append(psutil.cpu_percent())
        time.sleep(interval)
    return timestamps, cpu_usage

def plot_cpu_graph():
    timestamps, cpu_usage = collect_cpu_data()
    plt.figure(figsize=(6, 3))
    plt.plot(timestamps, cpu_usage, marker='o', linestyle='-', color='b', label='CPU %')
    plt.xlabel('–í—Ä–µ–º—è (—Å–µ–∫)')
    plt.ylabel('–ó–∞–≥—Ä—É–∑–∫–∞ CPU (%)')
    plt.title('–ì—Ä–∞—Ñ–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ CPU')
    plt.legend()
    plt.grid()
    plt.tight_layout()
    plt.savefig("logs/cpu_graph.png")
    plt.close()

async def get_system_info():
    uname = platform.uname()
    boot_time = datetime.fromtimestamp(psutil.boot_time())
    avg_temp, core_temps = await get_cpu_temp()
    gpu_utilization, gpu_temp = get_gpu_info()
    
    system_info = f"*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:*\n"
    system_info += f"*–°–∏—Å—Ç–µ–º–∞:* {uname.system}\n"
    system_info += f"*–ò–º—è —É–∑–ª–∞:* {uname.node}\n"
    system_info += f"*–†–µ–ª–∏–∑:* {uname.release}\n"
    system_info += f"*–í–µ—Ä—Å–∏—è:* {uname.version}\n"
    system_info += f"*–ú–∞—à–∏–Ω–∞:* {uname.machine}\n"
    system_info += f"*–ü—Ä–æ—Ü–µ—Å—Å–æ—Ä:* {uname.processor}\n"
    system_info += f"*–ó–∞–≥—Ä—É–∑–∫–∞ CPU:* {psutil.cpu_percent()}%\n"
    system_info += f"*–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU:* {avg_temp:.1f}¬∞C\n"
    system_info += f"*–ó–∞–≥—Ä—É–∑–∫–∞ GPU:* {gpu_utilization}\n"
    system_info += f"*–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ GPU:* {gpu_temp}\n"
    system_info += f"*–ü–∞–º—è—Ç—å:* {psutil.virtual_memory().percent}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ\n"
    system_info += f"*–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:* {boot_time.strftime('%d.%m.%Y %H:%M:%S')}"
    
    return system_info

async def check_thresholds(bot):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    from .config import (CPU_LOAD_THRESHOLD, CPU_TEMP_THRESHOLD, 
                       GPU_LOAD_THRESHOLD, GPU_TEMP_THRESHOLD,
                       CHECK_INTERVAL, ALLOWED_USERS, notification_state)
    
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU
            cpu_load = psutil.cpu_percent()
            avg_temp, _ = await get_cpu_temp()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ GPU
            gpu_utilization, gpu_temp = get_gpu_info()
            gpu_utilization = float(gpu_utilization.replace('%', '')) if gpu_utilization != 'N/A' else 0
            gpu_temp = float(gpu_temp.replace('¬∞C', '')) if gpu_temp != 'N/A' else 0
            
            # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
            notifications = []
            
            # CPU Load
            if cpu_load > CPU_LOAD_THRESHOLD and not notification_state['cpu_load']:
                notifications.append(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: {cpu_load}%")
                notification_state['cpu_load'] = True
            elif cpu_load <= CPU_LOAD_THRESHOLD:
                notification_state['cpu_load'] = False
                
            # CPU Temp
            if avg_temp > CPU_TEMP_THRESHOLD and not notification_state['cpu_temp']:
                notifications.append(f"üå°Ô∏è –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU: {avg_temp:.1f}¬∞C")
                notification_state['cpu_temp'] = True
            elif avg_temp <= CPU_TEMP_THRESHOLD:
                notification_state['cpu_temp'] = False
                
            # GPU Load
            if gpu_utilization > GPU_LOAD_THRESHOLD and not notification_state['gpu_load']:
                notifications.append(f"‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ GPU: {gpu_utilization}%")
                notification_state['gpu_load'] = True
            elif gpu_utilization <= GPU_LOAD_THRESHOLD:
                notification_state['gpu_load'] = False
                
            # GPU Temp
            if gpu_temp > GPU_TEMP_THRESHOLD and not notification_state['gpu_temp']:
                notifications.append(f"üå°Ô∏è –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ GPU: {gpu_temp:.1f}¬∞C")
                notification_state['gpu_temp'] = True
            elif gpu_temp <= GPU_TEMP_THRESHOLD:
                notification_state['gpu_temp'] = False
                
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            if notifications:
                message = "üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–∏—Å—Ç–µ–º—ã:*\n\n" + "\n".join(notifications)
                for user_id in ALLOWED_USERS:
                    try:
                        await bot.send_message(user_id, message, parse_mode=ParseMode.MARKDOWN)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ—Ä–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π: {str(e)}")
            
        await asyncio.sleep(CHECK_INTERVAL) 